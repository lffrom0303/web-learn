react和react-dom为什么分开？
因为React并不只用于浏览器，当后来发展被应用到其他平台上时候，渲染层就不一定是浏览器dom操作了，比如React native。于是dom操作层，也可理解成具体实施渲染的层就被隔离出来了，单独打包，按需引用。

React 和 ReactDOM 各自负责什么？
react 负责描述特性，提供React API。类组件、函数组件、hooks、contexts、refs...这些都是React特性，react模块只描述特性长什么样、该怎么用，不负责特性的具体实现，而react-dom就负责实现特性。

react-dom、react-native 称为渲染器，负责在不同的宿主载体上实现特性，达到与描述相对应的真实效果。比如在浏览器上，渲染出DOM树、响应点击事件等。

React负责Web和Mobile通用的核心部分，
React-dom负责Dom操作，
React-native负责Mobile部分。

React Redux 是 Redux 的官方 React UI 绑定库。它使得你的 React 组件能够从 Redux store 中读取到数据，并且你可以通过dispatch actions去更新 store 中的 state。

react-app-rewired是什么？
因为create-react-app本来就提供了一组默认的配置选项，目的就是想让开发者专注于代码开发，但有时可能需要更改一些配置选项去满足需求，比如添加自定义插件或加载其他样式文件等。那么这个时候就需要强制eject去修改默认配置，但这种方式是不可逆的，同时会有一些隐藏的问题。而使用react-app-rewired可以重写create-react-app的默认配置，无需强制通过eject暴露配置出来。它通过一个配置文件，使开发人员能够使用自定义插件、修改配置文件、添加 Babel 插件等。


react的useEffect函数return一个不为函数的值时会怎样？
返回的这个值会被忽略，不会有特殊操作。

为什么react要这样做？
因为useEffect是一个创建执行副作用的函数，比如，订阅事件、设置定时器或发起网络请求等。所以就需要在某个时机，也就是组件的销毁阶段，去销毁这些副作用，那么销毁副作用就需要执行，也就是需要函数执行，而react采用的是useEffect中返回一个函数，并执行这个函数的方式实现，所以返回的不是一个函数，比如说返回一个字符串，react并不会执行任何操作，就没有执行的这个操作，无法实现销毁副作用，导致内存泄漏或其他问题。

useEffect 使用空依赖数组 []，表示只在组件挂载时执行一次。 useEffect 没有指定依赖数组，表示在每次组件更新时都会执行。useEffect相当于是聚合了多个生命周期函数。

为什么setState设计成异步？
this.setState({ a: this.state.a + 1},()=>{ console.log(a) })
假如setState设计成同步，那么每次setState，都会去触发render一次，耗费性能。
在react17之前，setState会在不同情况下出现不同同步异步两种情况，像是在Promise异步任务中使用setState，是同步的。在react18后，setState在不同情况下都是异步的。当存在多个setState执行，render只会执行一次，相当于是会收集不同的partialState，在一定的时机再将他们合并到state，而收集不同partialState需要耗时，同时不也能影响外部的代码，所以就需要被设计成异步，滞后于同步代码的执行，保证收集完partialState，再一次更新。

为什么react建议使用函数式组件而非类式组件？
类组件是面向对象编程思想的。而使用面向对象这个方式，我们总是会有意或无意地做这样两件事情。
1、类组件的代码结构复杂,需要用到继承以及重写一些生命周期方法才能达到某些目的,还有代码逻辑难以复用。
2、是面向对象和函数式编程这两套不同的设计思想之间的差异。

hook:Hook增加了函数式组件中state的使用，在之前函数式组件是无法拥有自己的状态，只能通过props以及context来渲染自己的UI，而在业务逻辑中，有些场景必须要使用到state，那么我们就只能将函数式组件定义为class组件。而现在通过Hook，我们可以轻松的在函数式组件中维护我们的状态，不需要更改为class组件。

Hooks的局限性
1、Hooks 暂时还不能完全地为函数组件补齐类组件的能力：比如 getSnapshotBeforeUpdate、componentDidCatch 这些生命周期，目前都还是强依赖类组件的
2、我们有时会在类组件中见到一些方法非常繁多的实例，如果用函数组件来解决相同的问题，业务逻辑的拆分和组织会是一个很大的挑战。我个人的感觉是，从头到尾都在“过于复杂”和“过度拆分”之间摇摆不定，哈哈。耦合和内聚的边界，有时候真的很难把握，函数组件给了我们一定程度的自由，却也对开发者的水平提出了更高的要求。
3、Hooks 在使用层面有着严格的规则约束：对于如今的 React 开发者来说，如果不能牢记并践行 Hooks 的使用原则，如果对 Hooks 的关键原理没有扎实的把握，很容易把自己的 React 项目搞成大型车祸现场。
